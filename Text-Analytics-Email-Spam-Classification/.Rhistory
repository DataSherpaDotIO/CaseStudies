adData=data.frame(diagnosis, predictors)
trainIndex=createDataPartition(diagnosis, p=0.50)
training=adData[trainIndex,]
adData=data.frame(diagnosis, predictors)
testIndex=createDataPartition(diagnosis, p=0.50,list=FALSE)
training=adData[-testIndex,]
testing=adData[testIndex,]
dim(training)
dim(testing)
dim(predictors)
dim(diagnosis)
head(training
)
head(training)
names(training)
dim(predictors)
names(predictors)
head(diagnosis)
data("concrete")
data(concrete)
set.seed(1000)
inTrain=createDataPartition(mixture$CompressiveStrength, p=3/4)[[1]]
inTrain=createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training=mixtures[inTrain,]
testing=mixtures[-inTrain,]
names(training)
hist(training$Superplasticizer)
dim(training)
training$Superplasticizer
unique(training$Superplasticizer)
hist(training$Superplasticizer)
?hist
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
?bs
library(splines)
?bs
librry(caret)
library(caret)
library(kernlab)
data(spam)
iT
iT <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
tr <- spam(iT)
tr <- spam[iT,]
te <- spam[-iT,]
training[,-58]
head(training[,-58])
head(training[,58])
head(training)
dim(head(training))
dim(head(training[,-58]))
cor(training[,-58])
cor(training[,-58])
dim(cor(training[,-58]))
dim(abs(cor(training[,-58])))
abs(cor(training[,-58]))
M <- abs(cor(training[,-58]))
dim(M)
diag(M)
diag(M) <- 0
M
which(M>0.8, arr.ind=T)
data(spam)
iT <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
tr <- spam[iT,]
te <- spam[-iT,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M>0.8, arr.ind=T)
which(M>0.4, arr.ind=T)
names(spam)
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
sSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
prComp <- prcomp(sSpam)
head(sSpam)
head(prComp)
head(sSpam)
head(prComp)
dim(prComp)
class(prComp)
prComp$rottation
prComp$rotation
names(prComp$rotation)
head(prComp$rotation)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(testing$Superplasticizer)
hist(log10(training$Superplasticizer))
unique(concrete$Superplasticizer)
hist(log(training$Superplasticizer))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p=3/4)[[1]]
inTrain
training <- adData[inTrain,]
testing <- adData[-inTrain,]
names(training)
names(training[,c("IL")])
?grep
grep("^IL", names(training))
training[,grep("^IL", names(training))]
ilData <- training[,grep("^IL", names(training))]
?preProcess
preProcess(ilData, method="pca", thresh=80)
preProcess(ilData, method="pca", thresh=0.8)
ibrary(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
ilData <- training[,grep("^IL | diagnosis", names(training))]
names(ilData)
ilData <- training[,grep("^IL \\| diagnosis", names(training))]
names(ilData)
names(ilData <- training[,grep("^IL \\| diagnosis", names(training))])
names(ilData <- training[,grep("diagnosis", names(training))])
names(ilData <- training[,grep("diagnosis, names(training))])
""
)))
""
names(ilData <- training[,grep("diagnosis", names(training))])
grep("diagnosis", names(training))
training[,grep("diagnosis", names(training))]
training[,grep("^IL | diagnosis", names(training))]
training[,grep("^IL|diagnosis", names(training))]
ilData <- training[,grep("^IL|diagnosis", names(training))]
preProc <- preProcess(ilData, method="pca", thresh=0.8)
preProcess(ilData, method="pca", thresh=0.8)
names(ilData)
head(ilData)
preProc <- preProcess(ilData$diagnosis, method="pca", thresh=0.8)
ilData <- training[,grep("^IL", names(training))]
preProcess(ilData, method="pca", thresh=0.8)
ilData <- training[,grep("^IL|diagnosis", names(training))]
modFie <- train(diagnosis ~ ., method="glm", data=training)
train(diagnosis ~ ., method="glm", data=training)
train(diagnosis ~ ., method="lm", data=training)
install.packages("e1071")
train(diagnosis ~ ., method="glm", data=training)
train(diagnosis ~ ., method="glm", data=ilData)
train(diagnosis ~ ., method="glm", data=testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(testing)
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer))
unique(mixtures$Superplasticizer)
unique(log(mixtures$Superplasticizer))
unique(training$Superplasticizer)
fit <- lm(mpg~wt, mtcars)
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(0.975, df=fit$df)*sumCoef[2,2]
sumCoef[2,1]
sumCoef[2,2]
sumCoef[1,1] + c(-1, 1) * qt(0.975, df=fit$df)*sumCoef[1,2]
fit <- lm(mtcars$mpg~mtcars$wt)
summary(fit)
sumCoef <- summary(fit)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(0.975, df=fit$df)*sumCoef[2,2]
sumCoef
newdata <- as.data.frame(mean(mtcars$wt))
names(newdata)
head(newdata)
names(newdata) <- "wt"
head(newdata)
conf.int <- predict(fit, newdata=newdata, interval="confidence", level=0.95)
conf.int
predict(fit, newdata=newdata, interval="prediction", level=0.95)
conf.int <- predict(fit, newdata=newdata, interval="confidence", level=0.95)
conf.int
newdata <- as.data.frame(c(3000))
newdata
names(newdata) <- "wt"
newdata
conf.int <- predict(fit, newdata=newdata, interval="confidence", level=0.95)
conf.int
conf.int <- predict(fit, newdata=newdata, interval="prediction", level=0.95)
conf.int
fit <- lm(mtcars$mpg~mtcars$wt)
coef(fiy)
coef(fit)
coef(fit)[1]
coef(fit)[1]+coef(fit)[2]*3
coef(fit)[1]
coef(fit)[2]
coef(fit)[2]*3
conf.int <- cbind(newdata, predict(fit, newdata=newdata, interval="prediction", level=0.95))
conf.int
man <- ppredict(fit, newdata=newdata, se=TRUE)
man <- predict(fit, newdata=newdata, se=TRUE)
man
man
fit <- lm(mtcars$mpg~mtcars$wt)
sumCoef <- summary(fit)$coefficients
(sumCoef[2,1] + c(-1, 1) * qt(0.975, df=fit$df)*sumCoef[2,2])/10
head(mtcars)
fit <- lm(mtcars$mpg~mtcars$wt)
conf.int <- predict(fit, newdata=mtcars, interval="confidence", level=0.95)
conf.int
conf.int <- predict(fit, newdata=mean(mtcars$wt), interval="confidence", level=0.95)
conf.int
fit <- lm(mtcars$mpg~mean(mtcars$wt))
fit <- lm(mpg~ mean(wt), mtcars)
fit <- lm(mpg~ I(mean(wt)), mtcars)
fit <- lm(mpg~ I(mean(mtcars$wt)), mtcars)
fit <- lm(mpg~ mean(wt), mtcars)
fit <- lm(mpg~wt, mtcars)
conf.int <- predict(fit, newdata=as.data.frame(c(2000)), interval="confidence", level=0.95)
conf.int <- predict(fit, newdata=as.data.frame(wt=c(2000)), interval="confidence", level=0.95)
newdata <- as.data.frame(wt=c(2000))
newdata <- as.data.frame(c(2000))
newdata
names(newdata) <- "wt"
newdata
conf.int <- predict(fit, newdata=newdata, interval="confidence", level=0.95)
conf.int
library(datasets)
mtcars
lm(mpg~ wt )
lm(mpg~ wt + factor(cyl), data=mtcars )
lm(mpg~ factor(cyl) + wt, data=mtcars )
factor(cyl)
factor(mtcar$cyl)
factor(mtcars$cyl)
dataset(mtcars)
library(datasets)
dataset(mtcars)
lm(mpg ~ factor(cyl) + wt, mtcars)
summary(lm(mpg ~ factor(cyl) + wt, mtcars))$Coefficients
summary(lm(mpg ~ factor(cyl) + wt, mtcars))$coefficients
summary(lm(mpg ~ cyl + wt, mtcars))$coefficients
summary(lm(mpg ~ . + wt, mtcars))$coefficients
names(mtcars)
factor(mtcars$cyl)
unique(factor(mtcars$cyl))
summary(lm(mpg ~ factor(cyl) + wt, mtcars))$coefficients
summary(lm(mpg ~ factor(cyl), mtcars))$coefficients
summary(lm(mpg ~ factor(cyl) + wt, mtcars))$coefficients
summary(lm(mpg ~ factor(cyl) + wt + factory(cyl)*wt, mtcars))$coefficients
summary(lm(mpg ~ factor(cyl) + wt + factor(cyl)*wt, mtcars))$coefficients
summary(lm(mpg ~ factor(cyl)*wt, mtcars))$coefficients
summary(lm(mpg ~ factor(cyl) + wt, mtcars))$coefficients
summary(lm(mpg ~ factor(cyl)*wt, mtcars))$coefficients
summary(lm(mpg ~ I(factor(cyl)*wt), mtcars))$coefficients
summary(lm(mpg ~ factor(cyl):wt, mtcars))$coefficients
summary(lm(mpg ~ wt:factor(cyl), mtcars))$coefficients
fit1 <- lm(mpg ~ factor(cyl) + wt, mtcars)
fit2 <- lm(mpg ~ factor(cyl):wt, mtcars)
summary(fit2)
anova(fit1, fit2)
lrt(fit1, fit2)
lrtest(fit1, fit2)
?lr
?lrtest
?lrt
install.packages("lrtest")
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?anova
fit <- lm(y~x)
hatvalues(fit)
dfbetas(fit)
?mtcars
getwd()
install.packages("pdflatex")
library(pgmm)
data(olive)
olive <- olive[,-1]
names(olive)
modFit <- train(Area ~., data=olive)
library(caret)
modFit <- train(Area ~., data=olive)
modFit <- train(Area ~., data=olive)
print(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata = )
predict(modFit, newdata = newdata)
unique(olive$Area)
?olive
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
dim(SAheart)
dim(SAheart)[1]
dim(SAheart)[1]/2
dim(trainSA)
dim(testSA)
set.seed(3234)
set.seed(13234)
?m
?lm
names(trainSA)
modFit <- lm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
print(modFit$finalModel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(training, modFit)
missClass(modFit, training)
missClass(training, modFit$finalModel)
predict(training, modFit$finalModel)
predict(modFit, testing)
predict(modFit, testSA)
missClass(trainSA, modFit$finalModel)
missClass(trainSA, modFit)
missClass(modFit, trainSA)
modFit
predict(modFit$finalModel, testSA)
missClass(modFit$finalModel, testSA)
missClass(testSA, modFit)
missClass(testSA, modFit$finalModel)
modFit
summary(modFit)
names(testSA)
treeresponse
?treebagFuncs
missClass(testSA, modFit$pred)
modFit$pred
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
modFit$pred
modFit$results
modFit$modelType
testp <- predict(modFit$finalModel, testSA)
trainp <- predict(modFit$finalModel, trainSA)
missClass(testSA, testp)
missClass(testSA, trainp)
missClass(trainSA, trainp)
trainp <- predict(modFit, trainSA)
testp <- predict(modFit, testSA)
missClass(trainSA, trainp)
missClass(testSA, testp)
testp <- predict(modFit$finalModel, testSA)
trainp <- predict(modFit$finalModel, trainSA)
missClass(testSA, testp)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library("party")
install.packages("party")
library(party)
str(iris)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris)
print(iris_ctree)
plot(iris_ctree, type="simple")
install.packages("zoo")
library(caret)
install.packages("care")
install.packages("caret")
63 *26
install.packages("RJDBC")
library(RJDBC)
library(RJDBC)
install.packages("RJDBC")
library(RJDBC)
instrall.packages("RCassandra")
install.packages("RCassandra")
library(RCassandra)
con <- RC.connect("127.0.0.1", 9042)
con <- RC.connect("127.0.0.1", 9042L)
con <- RC.connect("localhost", 9042L)
con <- RC.connect("localhost", 9042)
con <- RC.connect('127.0.0.1', 9042)
library(RCassandra)
con <- RC.connect("127.0.0.1", 9160)
RC.use(con, 'mykeyspace', cache.def=FALSE)
RC.use(con, 'mykeyspace')
RC.use(con, mykeyspace)
RC.use(con, "mykeyspace")
con <- RC.connect("127.0.0.1", 9160)
RC.use(con, "mykeyspace")
RC.use(con, 'mykeyspace)
;
error setting keyspace (unrecognized response
c
)
''
'
RC.use(con, 'mykeyspace')
quit()
library(manipulate)
manipulate(plot(1:x), x = slider(1,100))
require(rCharts)
install.packages("rCharts")
library(datasets)
?datasets
library(help="datasets")
desc(ability.cov)
head(ability.cov)
head(BJsales)
?BJsales
BJsales
head(ChickWeight)
?ChickWeight
summary(ChickWeight)
ChickWeight
?ToothGrowth
head(ToothGrowth)
head(ToothGrowth)
head(austres)
?austres
head(attitude)
head(pressure)
nrows(pressure)
rows(pressure)
nwos
nrow(pressure)
pressure
plot
plot(pressure.temperature, pressure.pressure)
plot(pressure.temperature, pressure.pressure)
using(pressure)
library(pressure)
using(pressure)
pwd
getwd()
ls
dir
utils:::menuInstallPkgs()
install.packages("RGoogleAnalytics_0.1.1"
)
install.packages("RGoogleAnalytics")
install.packages("RGoogleAnalytics")
utils:::menuInstallLocal()
instll.packagge("RGoogleAnalytics")
install.packagge("RGoogleAnalytics")
install.package("RGoogleAnalytics")
install.packages("RGoogleAnalytics")
packages.list
install.packages("RGoogleAnalytics")
chooseCRANmirror()
install.packages("RGoogleAnalytics")
installed.packages()
installed.packages() > C:/r-packages.txt
installed.packages() >> C:/r-packages.txt
library("RGoogleAnalytics")
version
ga <- RGoogleAnalytics()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
ga <- RGoogleAnalytics()
q()
q()
sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL","C")
Sys.getlocale()
Sys.getenv()
Sys.getpid()
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("methods","statmod","stats","graphics","RCurl","jsonlite","tools","utils")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-turin/4/R")))
library(h20)
library(h2o)
localH2o = h2o.init(nthreads=-1)
demo(h2o.kmeans)
h2o.shutdown()
quit
localH2o = h2o.init(nthreads=-1)
h2o.shutdown()
localh20 = h2o.init(nthreads=-1)
localh20
localH2o = h2o.init(nthreads=-1)
localh20
h2o.shutdown()
localh20
localh20
h2o.shutdown()
localH2o = h2o.init(nthreads=-1)
h2o.shutdown()
setwd("E:/venture/Services/DataSherpa/CaseStudies/Text-Analytics/Email-Spam-Classification")
library(randomForest)
?randomForest
?predict
?slam
library(slam)
?slam
help(slam)
packageName(slam)
